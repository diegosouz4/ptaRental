function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function changeHero(){var t=document.querySelector(".hero");if(t){var e=["./dest/img/hero-01.jpg","./dest/img/hero-02.jpg","./dest/img/hero-03.jpg"],r=0;setInterval((function(){t.style.backgroundImage="url(".concat(e[r],")"),r=r+1>e.length-1?r=0:r+1}),4e3)}}
/*! lozad.js - v1.16.0 - 2020-09-06
 * https://github.com/ApoorvSaxena/lozad.js
 * Copyright (c) 2020 Apoorv Saxena; Licensed MIT */function initMobileMenu(){var t={wrapper:document.querySelector(".header [data-menu='wrapper']"),btn:document.querySelector(".header [data-menu='btn']")};t.btn&&t.wrapper&&(t.btn.addEventListener("click",(function(e){e.preventDefault();var r=e.currentTarget;console.log("bot√£o"),r.classList.contains("show")?(r.classList.remove("show"),t.wrapper.classList.remove("show"),setTimeout((function(){t.wrapper.style.display="none"}),500)):(r.classList.add("show"),t.wrapper.style.display="block",setTimeout((function(){t.wrapper.classList.add("show")}),500))})),window.addEventListener("resize",(function(){t.wrapper.setAttribute("style",""),t.wrapper.classList.remove("show"),t.btn.classList.remove("show")})))}document.addEventListener("DOMContentLoaded",(function(){lozad().observe(),initMobileMenu(),changeHero()})),function(t,e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.lozad=e()}(this,(function(){"use strict";var t="undefined"!=typeof document&&document.documentMode,e={rootMargin:"0px",threshold:0,load:function(e){if("picture"===e.nodeName.toLowerCase()){var r=e.querySelector("img"),o=!1;null===r&&(r=document.createElement("img"),o=!0),t&&e.getAttribute("data-iesrc")&&(r.src=e.getAttribute("data-iesrc")),e.getAttribute("data-alt")&&(r.alt=e.getAttribute("data-alt")),o&&e.append(r)}if("video"===e.nodeName.toLowerCase()&&!e.getAttribute("data-src")&&e.children){for(var n=e.children,a=void 0,i=0;i<=n.length-1;i++)(a=n[i].getAttribute("data-src"))&&(n[i].src=a);e.load()}e.getAttribute("data-poster")&&(e.poster=e.getAttribute("data-poster")),e.getAttribute("data-src")&&(e.src=e.getAttribute("data-src")),e.getAttribute("data-srcset")&&e.setAttribute("srcset",e.getAttribute("data-srcset"));var d=",";if(e.getAttribute("data-background-delimiter")&&(d=e.getAttribute("data-background-delimiter")),e.getAttribute("data-background-image"))e.style.backgroundImage="url('"+e.getAttribute("data-background-image").split(d).join("'),url('")+"')";else if(e.getAttribute("data-background-image-set")){var s=e.getAttribute("data-background-image-set").split(d),u=s[0].substr(0,s[0].indexOf(" "))||s[0];u=-1===u.indexOf("url(")?"url("+u+")":u,1===s.length?e.style.backgroundImage=u:e.setAttribute("style",(e.getAttribute("style")||"")+"background-image: "+u+"; background-image: -webkit-image-set("+s+"); background-image: image-set("+s+")")}e.getAttribute("data-toggle-class")&&e.classList.toggle(e.getAttribute("data-toggle-class"))},loaded:function(){}};function r(t){t.setAttribute("data-loaded",!0)}var o=function(t){return"true"===t.getAttribute("data-loaded")},n=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;return t instanceof Element?[t]:t instanceof NodeList?t:e.querySelectorAll(t)};return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:".lozad",a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=Object.assign({},e,a),d=i.root,s=i.rootMargin,u=i.threshold,c=i.load,l=i.loaded,g=void 0;"undefined"!=typeof window&&window.IntersectionObserver&&(g=new IntersectionObserver(function(t,e){return function(n,a){n.forEach((function(n){(n.intersectionRatio>0||n.isIntersecting)&&(a.unobserve(n.target),o(n.target)||(t(n.target),r(n.target),e(n.target)))}))}}(c,l),{root:d,rootMargin:s,threshold:u}));for(var b,f=n(t,d),p=0;p<f.length;p++)(b=f[p]).getAttribute("data-placeholder-background")&&(b.style.background=b.getAttribute("data-placeholder-background"));return{observe:function(){for(var e=n(t,d),a=0;a<e.length;a++)o(e[a])||(g?g.observe(e[a]):(c(e[a]),r(e[a]),l(e[a])))},triggerLoad:function(t){o(t)||(c(t),r(t),l(t))},observer:g}}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
